/*不修改数组找出重复的数字
在一个长度为n+1的数组中所有的数字的范围为1~n，请找出数组中任意一个重复的数字，
但不能修改输入的数组
解题思路：1.创建一个长度为n+1的辅助数组，然后逐一把原数组的每个数字复制到辅助数组，
如果原数组中被复制的数字是m,则把它复制到数组中坐标为m的位置。需要O（n）的辅助空间
2.二分查找：避免使用O(n)的辅助空间，把1~n的数字从中间的数字m分为两部分，如果前一半
的数字的数目超过m,那么这一半一定包含重复数字。继续按照二分法查找*/

# include<stdio.h>
int getDuplicate(const int *arr,int len)
{
	if(arr == NULL||len <= 0)
	{
		return -1;
	}
	int start = 1;
	int end = len-1;
	while(end >= start)
	{
		int mid = ((end-start)/2+start);
		int count = Ran(arr,len,start,end);
		if(end == start)
		{
			if(count > 1)
			{
				return start;
			}
			else
			{
				break;
			}
		}
		if(count > (mid - start + 1))//如果这部分数字在数组arr中出现的次数大于
		{
			end = mid;
		}
		else
		{
			start = mid +1;
		}
	}
	return -1;
}
int Ran(int *arr,int len,int start,int end)//统计由中间数字m分割开的前一部分的数字在数组arr中的数目
{
	if(arr == NULL)
	{
		return 0;
	}
	int count =0;
	for(int i=0;i<len;i++)
	{
		if(arr[i]>=start&&arr[i]<=end)
		{
			count++;
		}
	}
}
